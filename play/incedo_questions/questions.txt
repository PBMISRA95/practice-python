1. Write a function that takes a string as input and returns it reversed.
Example: reverse_string("hello") → "olleh"

2. Write a function that takes a list of numbers and returns their sum.
Example: sum_list([1, 2, 3, 4]) → 10

3. Write a function that takes an integer and returns "even" if it's even, "odd" if it's odd.
Example: check_even_odd(5) → "odd"

4. Write a function to compute the factorial of a non-negative integer.
Example: factorial(5) → 120

5. Write a function that counts the number of vowels (a, e, i, o, u) in a string.
Example: count_vowels("hello") → 2

6. Write a function that takes a list of numbers and returns the maximum value.
Example: find_max([3, 1, 4, 1, 5]) → 5

7. Write a function that checks if a string is a palindrome (case-insensitive).
Example: is_palindrome("Racecar") → True

8. Write a function that removes duplicates from a list and returns the result.
Example: remove_duplicates([1, 2, 2, 3, 4, 4]) → [1, 2, 3, 4]

9. Write a function that takes a string and returns a dictionary with the frequency of each word.
Example: word_frequency("the cat the dog") → {"the": 2, "cat": 1, "dog": 1}

10. Write a function that takes a list of words and joins them into a single string with spaces using join().
Example: join_words(["hello", "world"]) → "hello world"

11. Write a function that returns a dictionary of character counts in a string.
Example: count_chars("hello") → {'h': 1, 'e': 1, 'l': 2, 'o': 1}

12. Write a function that squares numbers in a list if they are odd, using a list comprehension with a conditional.
Example: square_odds([1, 2, 3, 4]) → [1, 2, 9, 4]

13. Write a function that rotates a list to the right by k steps using slicing.
Example: rotate_list([1, 2, 3, 4, 5], 2) → [4, 5, 1, 2, 3]

14. Write a function that takes a list of dictionaries and sorts it by the "name" key in ascending order.
Example: data = [{"name": "Bob", "age": 25}, {"name": "Alice", "age": 30}] → [{"name": "Alice", "age": 30}, {"name": "Bob", "age": 25}]

15. Write a function that takes a list of numbers and returns their arithmetic mean (return None for an empty list).
Example: average_list([4, 8]) → 6.0

16. Write a function that returns the second-largest unique number in a list (raise an error if the list has fewer than two unique values).
Example: second_largest([4, 1, 7, 7, 3]) → 4

17. Write a function that checks whether an integer is prime.
Example: is_prime(11) → True

18. Write a function that returns a list of all prime numbers less than or equal to a given limit.
Example: list_primes(10) → [2, 3, 5, 7]

19. Write a function that returns the greatest common divisor (GCD) of two integers.
Example: gcd(48, 18) → 6

20. Write a function that returns the least common multiple (LCM) of two integers.
Example: lcm(4, 6) → 12

21. Write a function that returns the n-th Fibonacci number (0-indexed).
Example: fibonacci(7) → 13

22. Write a function that generates a list containing the first n Fibonacci numbers.
Example: generate_fibonacci(5) → [0, 1, 1, 2, 3]

23. Write a function that converts a temperature from Celsius to Fahrenheit (°F = °C × 9/5 + 32).
Example: celsius_to_fahrenheit(0) → 32

24. Write a function that determines if a given year is a leap year in the Gregorian calendar.
Example: is_leap_year(2000) → True

25. Write a function that flattens a list of lists into a single list (one level deep).
Example: flatten_list([[1, 2], [3, 4]]) → [1, 2, 3, 4]

26. Write a function that merges two dictionaries. If there are keys in the second dictionary that override those in the first, keep the second dictionary's values.
Example: merge_dicts({'a': 1}, {'a': 2, 'b': 3}) → {'a': 2, 'b': 3}

27. Write a function that returns a list of unique elements common to two lists.
Example: list_intersection([1, 2, 3], [2, 3, 4]) → [2, 3]

28. Write a function that checks if two strings are anagrams of each other (case-insensitive, ignore spaces).
Example: are_anagrams("Listen", "Silent") → True

29. Write a function that removes all punctuation characters from a string.
Example: remove_punctuation("Hi, there!") → "Hi there"

30. Write a function that returns the transpose of a 2-D list (matrix).
Example: transpose_matrix([[1, 2, 3], [4, 5, 6]]) → [[1, 4], [2, 5], [3, 6]]
